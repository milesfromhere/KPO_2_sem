namespace Call
{
    int __cdecl cdeclFunction(int a, int b, int c)
    {
        return a + b + c;
    }

    int __stdcall stdcallFunction(int& a, int b, int c)
    {
        return a * b * c;
    }

    int __fastcall fastcallFunction(int a, int b, int c, int d)
    {
        return a + b + c + d;
    }
}

/*
* EIP: Значение 0x003325E9 (это указатель на текущую выполняемую инструкцию, также известный как Instruction Pointer)
ESP: Значение 0x00CFF80C (указатель стека, указывает на вершину стека)
EBP: Значение 0x00CFF924 (базовый указатель стека, указывает на начало текущего фрейма стека)
EFL: Значение 0x00000216 (флаги процессора, такие как флаги состояния, флаги контроля и т. д.)
Каждый регистр (например, EAX, EBX, ECX и т. д.) представляет 32-битное (или 4-байтное) значение в процессоре.
Эти регистры используются для временного хранения данных и адресов памяти в процессе выполнения программы.

Значения этих регистров могут изменяться в процессе выполнения программы в зависимости от того, какая работа выполняется программой.
Например, в EAX может быть сохранено возвращаемое значение функции, в
EDX - адрес ячейки памяти, а в EBX - значение, которое может быть аргументом функции или просто какое-то значение,
которое программа использует в своей работе. Точное значение и использование регистров зависит от контекста выполнения программы.

### Определение функции:

Функция в программировании представляет собой блок кода, который выполняет определенную задачу или вычисляет определенное значение. 
Она может иметь параметры в качестве входных данных и может возвращать значение. Функции обычно используются для структурирования кода,
повторного использования и улучшения его читаемости.

### Отличие функции и процедуры:

Функция возвращает значение, а процедура не возвращает никакого значения, а лишь выполняет определенные действия или изменяет состояние программы.
Функции могут использоваться в выражениях и возвращать результат своей работы,
тогда как процедуры обычно вызываются для выполнения определенной последовательности действий без необходимости возвращения значения.

### Передача параметров по значению и по ссылке:

- **По значению**: Значение параметра копируется во временную переменную и передается в функцию.
Внутри функции изменения параметра не отражаются на переменной, переданной в вызове функции.

- **По ссылке**: Передается адрес переменной, а не ее значение.
Изменения параметра внутри функции также изменяют переменную, переданную в вызове функции.

### Соглашения о вызове функции:

1. **__cdecl**: Параметры передаются через стек в обратном порядке, функция сама отвечает за очистку стека после завершения.
Это стандартное соглашение вызова для функций в языке C и C++.

2. **__stdcall**: Параметры также передаются через стек, но функция не очищает стек после завершения.
Очистка стека выполняется вызывающей стороной. Это соглашение используется в WinAPI.

3. **__fastcall**: Первые параметры (обычно до трех) передаются через регистры процессора, а остальные — через стек.
Это соглашение ускоряет вызов функции, так как регистры процессора обычно быстрее доступны, чем стек.

### Определение соглашения вызова __cdecl:

`__cdecl` — это стандартное соглашение вызова функции, при котором параметры передаются через стек в обратном порядке. 
Функция сама отвечает за очистку стека после завершения.

### Определение соглашения вызова __stdcall:

*/
